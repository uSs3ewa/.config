import unfoldr
import Data.List.unfoldr
unfoldl = (reverse <$>) <$> unfoldr
:t unfoldr
unfoldr
:t maybe
:t foldr
:t zip
head [1..10]
abba
abba = [(+1), (*2), (^3)] <*> [10, 20, 30]
map (+1) [1..3]
:t filter
:t map
:t fib
fib 
[12..1]
[12,11..1]
enumFromTo 1 10
[1..10]
enumFromTo 1 10
emumFromTo 1 10
emumFromTo 1 20
[1..10]
:t Data.List.unfoldr
:t Data.List.unfolrd
:q
whatGrade 7
whatGrade 6
whatGrade age | (age >= 5) && (age <= 6) = "Kind" | otherwise = "Lost"
whatGrade age
whatGrade age
isOdd 1
isOdd n | n `mod` 2 == 0 = False | otherwise = True
isOdd 1
idOdd 1
idOdd 1
isOdd n | n `mod` 2 == 0 = False | otherwise = True
isOdd n | n `mod` 2 == 0 = False
isOdd :: Int -> Bool
addT :: (Int, Int) -> (Int, Int) -> (Int, Int); addT (x,y) (x2, y2) = (x + x2, y + y2)
addT :: (Int, Int) -> (Int, Int) -> (Int, Int)
addTuples (1,0) (0,1)
addTuples (x,y) (x2, y2) = (x + x2, y + y2)
addTuples (1,0) (0,1)
addTupLes (1,0) (0,1)
addTupes (1,0) (0,1)
addTupes (1, 0) (0, 1)
addTupes (1, 0) (0, 1)
addTuples (x,y) (x2, y2) = (x + x2, y + y2)
addTuples = (x,y) (x2, y2) = (x + x2, y + y2)
zips = zip names addr rand
zips = zip names addr
zips = zip names addr rand
rand = [2,4,5]
addr = [1, 2, 3]
names = ['1', '2']
nums
nums = [1,2..10]
zipN
zipN = zipWith (+) [1,2,3] [4, 5, 6, 7, 8 ,9  ]
zipN
zipN = zipWith (+) [1,2,3] [4, 5, 6]
nums
nums = sort [3, 2]
import Data.List
import DataList
nums = sort [3, 2]
nums = sort [3, 2]
nums = [x | x <- [0..500], x `mod` 13 == 0 and x `mod` 9 == 0]
nums = [x | x <- [0..500], x `mod` 13 == 0 & x `mod` 9 == 0]
351 `mod` 13
351 `mod` 9
234 `mod` 13
234 `mod` 9
117 `mod` 9
117 `mod` 13
nums
nums = [x | x <- [0..500], x `mod` 13 == 0, x `mod` 9 == 0]
nums = [x | x <- [0..500], x `mod` 13, x `mod` 9]
inf !! 100
inf = [10,20..]
:q
removeNonUppercase :: [Char] -> [Char]
:t Char
:t [Char]
:t String
:t STring
:t "HEL"
arr a = [0..10, even a]
arr = [0..10, 2]
:q
:t (==)
:t [Char]
:t "HELLO!"
:q
:t 9^2
:t 9**2
9**2 == 9^2
9^2

2024-11-30 01:53:22.965   [DBG] Check config path: '/home/stoat/Documents/TradingView/configs/config.json'
2024-11-30 01:53:22.965   [DBG] Check config path: '/nix/store/vrbz5i134m2761bsfkwb3hrfklza4bd6-tradingview-2.7.2/share/tradingview/resources/app.asar/configs/config.json'
2024-11-30 01:53:22.965   [INF] Use config path: '/nix/store/vrbz5i134m2761bsfkwb3hrfklza4bd6-tradingview-2.7.2/share/tradingview/resources/app.asar/configs/config.json'
2024-11-30 01:53:22.966   [DBG] Configuration.updateConfigFromEnvironment(): "TVD_DEBUGMODE: false"
2024-11-30 01:53:22.966   [DBG] Configuration.updateConfigFromEnvironment(): "TVD_LOG_VIEW_ENABLED: false"
2024-11-30 01:53:23.213   [DBG] Initializing UserService
2024-11-30 01:53:23.213   [INF] Initializing AppEventsService
2024-11-30 01:53:23.213   [DBG] Initializing AuthenticationHandler
2024-11-30 01:53:23.216   [DBG] Logger initialized
2024-11-30 01:53:23.217   [DBG] Initializing MainService
2024-11-30 01:53:23.217   [DBG] MainService.subscribeAppEvents()
2024-11-30 01:53:23.218   [DBG] Initializing LocaleService
2024-11-30 01:53:23.223   [INF] Main service created. appPath: '/nix/store/vrbz5i134m2761bsfkwb3hrfklza4bd6-tradingview-2.7.2/share/tradingview/resources/app.asar', documentsPath: '/home/stoat/Documents/TradingView' 
2024-11-30 01:53:23.224   [DBG] Initializing PersistenceService
2024-11-30 01:53:23.225   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:53:23.231   [DBG] Initializing WindowService
2024-11-30 01:53:23.234   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:53:23.234   [DBG] Initializing ThemeManager service
2024-11-30 01:53:23.234   [DBG] mn.setPlatformTheme()
2024-11-30 01:53:23.257   [DBG] WindowService.getChartWindows()
2024-11-30 01:53:23.258   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:53:23.259   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:53:23.259   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:53:23.260   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:53:23.260   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:53:23.261   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:53:23.287   [DBG] Initializing SettingsProvider
2024-11-30 01:53:23.287   [DBG] PasswordManagerService.getShouldSaveCredentials()
2024-11-30 01:53:23.288   [DBG] PasswordManagerService.setShouldSaveCredentials()
2024-11-30 01:53:23.289   [DBG] AppEventsService.doStartup()
2024-11-30 01:53:23.289   [DBG] AppEventsService.checkFirstRun()
2024-11-30 01:53:23.290   [DBG] Initializing TrackEventService
2024-11-30 01:53:23.290   [DBG] TrackEventService.updateAppTrackingStatus()
2024-11-30 01:53:23.291   [DBG] mn.availableThemes()
2024-11-30 01:53:23.291   [DBG] mn.availableThemes()
2024-11-30 01:53:23.291   [DBG] mn.availableThemes()
2024-11-30 01:53:23.291   [DBG] mn.availableThemes()
2024-11-30 01:53:23.342   [DBG] AppEventsService.initSession()
2024-11-30 01:53:23.345   [DBG] mn.setPlatformTheme()
2024-11-30 01:53:23.347   [DBG] UserService.Startup()
2024-11-30 01:53:23.348   [DBG] [1:53:23]: 'Startup ' (131) ms
2024-11-30 01:53:23.348   [INF] App version: 2.7.2
2024-11-30 01:53:23.348   [INF] Show Splash Window
2024-11-30 01:53:23.393   [DBG] MainService.registerOsTasks()
2024-11-30 01:53:23.393   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:53:23.394   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:53:23.394   [DBG] TrackEventService().Startup()
2024-11-30 01:53:23.394   [DBG] AppEventsService.getCid()
2024-11-30 01:53:23.394   [DBG] MainService.getVersionInfo()
2024-11-30 01:53:23.399   [DBG] mn.availableThemes()
2024-11-30 01:53:23.406   [DBG] PermissionsHandler.initialize()
2024-11-30 01:53:23.785   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:53:23.799   [DBG] MainService.getVersionInfo()
2024-11-30 01:53:24.69    [INF] Will sign in user: 'uSs3ewa', id: '89265016'
2024-11-30 01:53:24.197   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:53:24.700   [INF] Locale info. locale: 'en', host: 'https://www.tradingview.com/'
2024-11-30 01:53:24.701   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:53:24.707   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:53:24.708   [DBG] mn.availableThemes()
2024-11-30 01:53:24.709   [DBG] UserService.notifyUserSignedIn()
2024-11-30 01:53:24.709   [DBG] PersistenceService.checkUserStorageExistence()
2024-11-30 01:53:24.711   [INF] Restore user app state from '/home/stoat/.config/TradingView/TVUserStorage/id-89265016/settings.json'
2024-11-30 01:53:24.711   [DBG] PersistenceService.restore()
2024-11-30 01:53:24.711   [DBG] FileBasedStorage.restore()
2024-11-30 01:53:24.712   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:53:24.712   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:53:24.712   [DBG] TrackEventService.setUserData()
2024-11-30 01:53:24.713   [DBG] mn.availableThemes()
2024-11-30 01:53:24.720   [DBG] MainService.beforeStateApplying()
2024-11-30 01:53:24.720   [DBG] MainService.stateApplied()
2024-11-30 01:53:24.720   [DBG] PersistentArrayProxy.internalApplyState()
2024-11-30 01:53:24.735   [DBG] BaseWindow.addDisposable()
2024-11-30 01:53:24.735   [DBG] BaseWindow.applyWindowTheme()
2024-11-30 01:53:24.735   [DBG] mn.applyTheme()
2024-11-30 01:53:24.735   [DBG] BaseWindow.addDisposable()
2024-11-30 01:53:24.736   [INF] Created base window, tweaking current window
2024-11-30 01:53:24.736   [DBG] [4408633e] BaseWindow.addDisposable()
2024-11-30 01:53:24.736   [DBG] [4408633e] BaseWindow.addDisposable()
2024-11-30 01:53:24.791   [DBG] [4408633e] TabbedWindowBase.internalApplyState()
2024-11-30 01:53:24.793   [DBG] [4408633e] TabbedWindowBase.addTab()
2024-11-30 01:53:24.806   [DBG] [4408633e] BaseWindow.load()
2024-11-30 01:53:24.833   [DBG] [4408633e] BaseWindow.createAppAwaiter()
2024-11-30 01:53:24.837   [DBG] PersistentArrayProxy.resetItems()
2024-11-30 01:53:24.837   [DBG] LinkingService.internalApplyState()
2024-11-30 01:53:24.936   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:53:25.279   [DBG] mn.applyTheme()
2024-11-30 01:53:25.309   [DBG] [1:53:24]-[1:53:25]: 'BaseWindow: loading window page, url: '/app/window/index.html'' (501) ms
2024-11-30 01:53:25.317   [DBG] [Renderer] initializeIpcProxyForInstance windowControl id: 4408633e-tvd:tabbed-window-control; Old id undefined
2024-11-30 01:53:25.337   [DBG] [4408633e] TabbedWindowBase.getWindowStateAsync()
2024-11-30 01:53:25.353   [DBG] App.componentDidMount()
2024-11-30 01:53:25.354   [DBG] App.tokyoNightInitialize()
2024-11-30 01:53:25.354   [DBG] App.setParentId()
2024-11-30 01:53:25.354   [DBG] [Renderer] initializeIpcProxyForInstance windowControl id: 4408633e-tvd:tabbed-window-control; Old id undefined
2024-11-30 01:53:25.356   [DBG] App.setParentId(): "Registered window id: l"
2024-11-30 01:53:25.356   [DBG] <App>.componentDidMount(): "Will update window state: 3"
2024-11-30 01:53:25.358   [INF] Window finished load id: '4408633e'
2024-11-30 01:53:25.358   [DBG] [4408633e] TabbedWindowBase.notifyTabsChanged()
2024-11-30 01:53:25.358   [DBG] [4408633e] TabbedWindowBase.updateTabsContainer()
2024-11-30 01:53:25.358   [DBG] [4408633e] BaseWindow.show()
2024-11-30 01:53:25.359   [INF] Window page loaded, url: '/app/window/index.html'
2024-11-30 01:53:25.361   [DBG] TabbedWindowBase.findTabById(tabId: 442dfb0f)
2024-11-30 01:53:25.362   [DBG] [442dfb0f] Tab.setupViewEvents()
2024-11-30 01:53:25.362   [INF] Create tab url: 'https://www.tradingview.com/chart/5lF6EbOd/', id: '442dfb0f'
2024-11-30 01:53:25.363   [DBG] [442dfb0f] TvTab.setupTvViewEvents()
2024-11-30 01:53:25.363   [DBG] [4408633e] TabbedWindowBase.setActiveTab()
2024-11-30 01:53:25.363   [DBG] [4408633e] TabbedWindowBase.notifyTabsChanged()
2024-11-30 01:53:25.363   [DBG] [4408633e] TabbedWindowBase.updateTabsContainer()
2024-11-30 01:53:25.363   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:25.363   [DBG] [4408633e] TabbedWindowBase.setActiveTabView()
2024-11-30 01:53:25.364   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:25.364   [DBG] [4408633e] TabbedWindowBase.handleTabLoading()
2024-11-30 01:53:25.364   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:25.364   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:25.364   [DBG] [4408633e] TabbedWindowBase.notifyTabsChanged()
2024-11-30 01:53:25.364   [DBG] [4408633e] TabbedWindowBase.updateTabsContainer()
2024-11-30 01:53:25.364   [DBG] [442dfb0f] Tab.load()
2024-11-30 01:53:25.365   [DBG] TaskQueueImpl.startTask()
2024-11-30 01:53:25.365   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:25.365   [DBG] WindowService.prerenderView()
2024-11-30 01:53:25.383   [DBG] [442dfb0f] Tab.setViewData()
2024-11-30 01:53:25.383   [DBG] Tab id: 442dfb0f, loading url: https://www.tradingview.com/chart/5lF6EbOd/
2024-11-30 01:53:25.385   [DBG] Check config path: '/home/stoat/Documents/TradingView/configs/nav-rules.json'
2024-11-30 01:53:25.385   [DBG] Check config path: '/nix/store/vrbz5i134m2761bsfkwb3hrfklza4bd6-tradingview-2.7.2/share/tradingview/resources/app.asar/configs/nav-rules.json'
2024-11-30 01:53:25.385   [INF] Use config path: '/nix/store/vrbz5i134m2761bsfkwb3hrfklza4bd6-tradingview-2.7.2/share/tradingview/resources/app.asar/configs/nav-rules.json'
2024-11-30 01:53:25.388   [DBG] [4408633e] TabbedWindowBase.setActiveTab()
2024-11-30 01:53:25.388   [DBG] [4408633e] TabbedWindowBase.notifyTabsChanged()
2024-11-30 01:53:25.388   [DBG] [4408633e] TabbedWindowBase.updateTabsContainer()
2024-11-30 01:53:25.388   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:25.388   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:25.388   [DBG] [4408633e] TabbedWindowBase.updateTabsContainer()
2024-11-30 01:53:25.388   [DBG] [4408633e] TabbedWindowBase.restoreWindowState()
2024-11-30 01:53:25.390   [DBG] PersistentArrayProxy.internalExtractState()
2024-11-30 01:53:25.390   [DBG] [4408633e] TabbedWindowBase.internalExtractState()
2024-11-30 01:53:25.390   [DBG] [4408633e] TabbedWindowBase.makeStateSnapshot()
2024-11-30 01:53:25.390   [DBG] [442dfb0f] Tab.makeStateSnapshot()
2024-11-30 01:53:25.390   [DBG] [442dfb0f] Tab.makeStateSnapshot()
2024-11-30 01:53:25.391   [DBG] LinkingService.internalExtractState()
2024-11-30 01:53:25.391   [DBG] TrackEventService.setAppWindowsData()
2024-11-30 01:53:25.391   [DBG] WindowService.mergeAnonymousSession()
2024-11-30 01:53:25.391   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:53:25.392   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:53:25.394   [DBG] s.notifyListeners()
2024-11-30 01:53:25.394   [DBG] PasswordManagerService.getShouldSaveCredentials()
2024-11-30 01:53:25.394   [DBG] PasswordManagerService.setShouldSaveCredentials()
2024-11-30 01:53:25.394   [INF] Hide Splash Window
2024-11-30 01:53:25.394   [DBG] AppEventsService.openForwardedUrl()
2024-11-30 01:53:25.394   [DBG] [1:53:25]: 'Session restored' (2177) ms
2024-11-30 01:53:25.394   [DBG] mn.availableThemes()
2024-11-30 01:53:25.394   [DBG] [1:53:24]-[1:53:25]: 'Restore user session' (685) ms
2024-11-30 01:53:25.394   [DBG] TrackEventService.trackStartApp()
2024-11-30 01:53:25.397   [DBG] TabPanel.render(): "Tabs panel registered"
2024-11-30 01:53:25.397   [DBG] <App>.componentDidMount(): "App sends ready event"
2024-11-30 01:53:25.405   [DBG] [2bc8752e] TabPanel.updateTabs()
2024-11-30 01:53:25.406   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:53:25.407   [DBG] [2bc8752e] TabPanel.updateTabs()
2024-11-30 01:53:25.408   [DBG] [2bc8752e] TabPanel.updateTabs()
2024-11-30 01:53:25.408   [DBG] [2bc8752e] TabPanel.updateTabs()
2024-11-30 01:53:25.408   [DBG] [2bc8752e] TabPanel.updateTabs()
2024-11-30 01:53:25.410   [DBG] App.initialize()
2024-11-30 01:53:25.410   [DBG] App.subscribeOnWindowEvents()
2024-11-30 01:53:25.413   [DBG] Initializing TabDragHandler
2024-11-30 01:53:25.413   [DBG] r.createRendererWorkerWindow()
2024-11-30 01:53:25.419   [DBG] BaseWindow.addDisposable()
2024-11-30 01:53:25.419   [DBG] BaseWindow.applyWindowTheme()
2024-11-30 01:53:25.419   [DBG] mn.applyTheme()
2024-11-30 01:53:25.419   [DBG] BaseWindow.addDisposable()
2024-11-30 01:53:25.419   [DBG] BaseWindow.load()
2024-11-30 01:53:25.428   [DBG] BaseWindow.createAppAwaiter()
2024-11-30 01:53:25.428   [DBG] BaseWindow.createAppAwaiter()
2024-11-30 01:53:25.434   [DBG] [4408633e] TabbedWindowBase.registerTabController()
2024-11-30 01:53:25.434   [INF] TabbedWindowBase.registerTabController(tabId: 442dfb0f-fef7-45ad-baa9-7d3387421cff, from window id: 29e96b59-tvd:tab)
2024-11-30 01:53:25.434   [DBG] [29e96b59] Tab.setController()
2024-11-30 01:53:25.436   [DBG] [4408633e] TabbedWindowBase.registerTabPanel()
2024-11-30 01:53:25.437   [DBG] TabComponent.componentDidMount(): "registered controller for tab 29e96b59"
2024-11-30 01:53:25.627   [DBG] Drag service window finished load
2024-11-30 01:53:25.635   [DBG] [1:53:25]-[1:53:25]: 'BaseWindow: loading window page, url: '/app/renderer-services/drag-service/index.html'' (216) ms
2024-11-30 01:53:25.635   [INF] Window page loaded, url: '/app/renderer-services/drag-service/index.html'
2024-11-30 01:53:25.636   [INF] Creating drag service
2024-11-30 01:53:25.636   [DBG] Native: capture pointer
2024-11-30 01:53:25.638   [DBG] NativeDragService.registerDraggable()
2024-11-30 01:53:25.638   [DBG] NativeDragService.registerDroppable()
2024-11-30 01:53:25.639   [DBG] WindowService.findWindowAsync()
2024-11-30 01:53:25.639   [DBG] WindowService.findWindowAsync()
2024-11-30 01:53:25.640   [DBG] TabComponent.componentDidMount(): "registered draggable with id 29e96b59"
2024-11-30 01:53:25.640   [DBG] TabPanel.componentDidMount(): "Registered droppable with id: 2bc8752e"
2024-11-30 01:53:25.815   [DBG] Tab id: 442dfb0f did-navigate (https://www.tradingview.com/chart/5lF6EbOd/)
2024-11-30 01:53:25.840   [DBG] Tab id: 442dfb0f page-title-updated
2024-11-30 01:53:27.155   [DBG] Tab id: 442dfb0f dom-ready
2024-11-30 01:53:27.155   [DBG] WindowService.zoom()
2024-11-30 01:53:27.155   [DBG] ZoomController.setZoomValue()
2024-11-30 01:53:27.155   [DBG] WindowService.getChartWindows()
2024-11-30 01:53:27.155   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:53:27.156   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:53:27.156   [DBG] mn.availableThemes()
2024-11-30 01:53:27.520   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:53:27.713   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:53:28.477   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:28.478   [DBG] [4408633e] TabbedWindowBase.setActiveTabView()
2024-11-30 01:53:28.479   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:28.479   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:30.157   [DBG] [29e96b59] TvTab.restoreChartLayout()
2024-11-30 01:53:30.218   [DBG] TvTab.setupTitleUpdates(): Layout restored.
2024-11-30 01:53:33.971   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:53:42.94    [DBG] TabNavigationHandler.handleWillNavigate(): "id: 442dfb0f, url https://www.tradingview.com/"
2024-11-30 01:53:42.95    [DBG] BaseNavigationHandler.navigateInPlace(url: https://www.tradingview.com/, tabId: 442dfb0f)
2024-11-30 01:53:42.95    [DBG] TabbedWindowBase.findTabById(tabId: 442dfb0f)
2024-11-30 01:53:42.96    [DBG] [29e96b59] TvTab.checkCanBeUnloaded()
2024-11-30 01:53:42.96    [DBG] [29e96b59] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:53:42.121   [INF] Tab id: 442dfb0f cannot be unloaded. Will ask user to close unsaved
2024-11-30 01:53:42.123   [DBG] R.showDialogWindow()
2024-11-30 01:53:42.123   [DBG] R.createDialogWindow()
2024-11-30 01:53:42.131   [DBG] BaseWindow.addDisposable()
2024-11-30 01:53:42.131   [DBG] BaseWindow.applyWindowTheme()
2024-11-30 01:53:42.131   [DBG] mn.applyTheme()
2024-11-30 01:53:42.131   [DBG] BaseWindow.addDisposable()
2024-11-30 01:53:42.132   [DBG] Dialog registered 0a769f7d
2024-11-30 01:53:42.132   [DBG] [0a769f7d] BaseWindow.load()
2024-11-30 01:53:42.145   [DBG] [0a769f7d] BaseWindow.createAppAwaiter()
2024-11-30 01:53:42.387   [DBG] Platform requested get-theme
2024-11-30 01:53:42.500   [DBG] [1:53:42]-[1:53:42]: 'BaseWindow: loading window page, url: '/app/dialog-window/index.html'' (368) ms
2024-11-30 01:53:42.511   [INF] Window page loaded, url: '/app/dialog-window/index.html'
2024-11-30 01:53:42.513   [DBG] [0a769f7d] BaseWindow.show()
2024-11-30 01:53:42.515   [DBG] [0a769f7d] BaseWindow.moveTop()
2024-11-30 01:53:42.516   [INF] [DialogWindow]: dialog Reload tab? showed
2024-11-30 01:53:42.516   [DBG] [0a769f7d] DialogWindow.waitInput()
2024-11-30 01:53:42.532   [ERR] Renderer for type 0 not registered, check renderers configuration
2024-11-30 01:53:43.386   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:53:45.39    [DBG] DialogWindow.close()
2024-11-30 01:53:45.39    [DBG] [Renderer] initializeIpcProxyForInstance dialogControl id: 0a769f7d-tvd:dialog; Old id undefined
2024-11-30 01:53:45.40    [DBG] [0a769f7d] BaseWindow.close()
2024-11-30 01:53:45.40    [DBG] [0a769f7d] BaseWindow.processClose()
2024-11-30 01:53:45.40    [DBG] WindowService.mayClose()
2024-11-30 01:53:45.40    [DBG] [0a769f7d] BaseWindow.willCloseWindow()
2024-11-30 01:53:45.43    [DBG] [0a769f7d] BaseWindow.dispose()
2024-11-30 01:53:45.48    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:53:45.52    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:53:54.288   [DBG] TabNavigationHandler.handleWillNavigate(): "id: 442dfb0f, url https://www.tradingview.com/u/uSs3ewa/"
2024-11-30 01:53:54.289   [DBG] BaseNavigationHandler.navigateToNewTab(url: https://www.tradingview.com/u/uSs3ewa/)
2024-11-30 01:53:54.289   [DBG] [4408633e] TabbedWindowBase.addTab()
2024-11-30 01:53:54.291   [DBG] TabbedWindowBase.findTabById(tabId: 8ee33b4f)
2024-11-30 01:53:54.291   [DBG] TabbedWindowBase.findTabById(tabId: 8ee33b4f)
2024-11-30 01:53:54.291   [DBG] [8ee33b4f] Tab.setupViewEvents()
2024-11-30 01:53:54.291   [INF] Create tab url: 'https://www.tradingview.com/u/uSs3ewa/', id: '8ee33b4f'
2024-11-30 01:53:54.291   [DBG] [8ee33b4f] TvTab.setupTvViewEvents()
2024-11-30 01:53:54.291   [DBG] [4408633e] TabbedWindowBase.setActiveTab()
2024-11-30 01:53:54.291   [DBG] [4408633e] TabbedWindowBase.notifyTabsChanged()
2024-11-30 01:53:54.291   [DBG] [4408633e] TabbedWindowBase.updateTabsContainer()
2024-11-30 01:53:54.291   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:54.292   [DBG] [4408633e] TabbedWindowBase.setActiveTabView()
2024-11-30 01:53:54.293   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:54.293   [DBG] [4408633e] TabbedWindowBase.handleTabLoading()
2024-11-30 01:53:54.293   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:54.293   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:54.293   [DBG] [4408633e] TabbedWindowBase.notifyTabsChanged()
2024-11-30 01:53:54.293   [DBG] [4408633e] TabbedWindowBase.updateTabsContainer()
2024-11-30 01:53:54.293   [DBG] [8ee33b4f] Tab.load()
2024-11-30 01:53:54.293   [DBG] TaskQueueImpl.startTask()
2024-11-30 01:53:54.293   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:54.293   [DBG] WindowService.prerenderView()
2024-11-30 01:53:54.294   [DBG] [8ee33b4f] Tab.setViewData()
2024-11-30 01:53:54.294   [DBG] Tab id: 8ee33b4f, loading url: https://www.tradingview.com/u/uSs3ewa/
2024-11-30 01:53:54.304   [DBG] [2bc8752e] TabPanel.updateTabs()
2024-11-30 01:53:54.315   [DBG] [4408633e] TabbedWindowBase.registerTabController()
2024-11-30 01:53:54.315   [INF] TabbedWindowBase.registerTabController(tabId: 8ee33b4f-4e07-4b92-b8f3-ea1820ce411f, from window id: d980c56a-tvd:tab)
2024-11-30 01:53:54.315   [DBG] [d980c56a] Tab.setController()
2024-11-30 01:53:54.317   [DBG] [2bc8752e] TabPanel.updateTabs()
2024-11-30 01:53:54.319   [DBG] NativeDragService.registerDraggable()
2024-11-30 01:53:54.319   [DBG] WindowService.findWindowAsync()
2024-11-30 01:53:54.321   [DBG] TabComponent.componentDidMount(): "registered controller for tab d980c56a"
2024-11-30 01:53:54.321   [DBG] TabComponent.componentDidMount(): "registered draggable with id d980c56a"
2024-11-30 01:53:54.780   [DBG] Tab id: 8ee33b4f did-navigate (https://www.tradingview.com/u/uSs3ewa/)
2024-11-30 01:53:54.853   [DBG] Tab id: 8ee33b4f page-title-updated
2024-11-30 01:53:55.916   [DBG] Tab id: 8ee33b4f dom-ready
2024-11-30 01:53:55.916   [DBG] WindowService.zoom()
2024-11-30 01:53:55.916   [DBG] ZoomController.setZoomValue()
2024-11-30 01:53:55.916   [DBG] WindowService.getChartWindows()
2024-11-30 01:53:55.916   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:53:55.918   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:53:55.919   [DBG] mn.availableThemes()
2024-11-30 01:53:56.609   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:56.609   [DBG] [4408633e] TabbedWindowBase.setActiveTabView()
2024-11-30 01:53:56.610   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:56.610   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:53:56.783   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:53:56.785   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:53:56.805   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:53:56.854   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:53:57.27    [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:53:57.28    [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:00.740   [DBG] TabNavigationHandler.handleWillNavigate(): "id: 8ee33b4f, url https://www.tradingview.com/chart/"
2024-11-30 01:54:01.67    [DBG] Tab id: 8ee33b4f did-navigate (https://www.tradingview.com/chart/)
2024-11-30 01:54:01.99    [DBG] Tab id: 8ee33b4f page-title-updated
2024-11-30 01:54:01.652   [DBG] Tab id: 8ee33b4f dom-ready
2024-11-30 01:54:01.652   [DBG] WindowService.zoom()
2024-11-30 01:54:01.652   [DBG] ZoomController.setZoomValue()
2024-11-30 01:54:01.653   [DBG] WindowService.getChartWindows()
2024-11-30 01:54:01.653   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:01.653   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:01.655   [DBG] mn.availableThemes()
2024-11-30 01:54:02.784   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:02.908   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:03.295   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:03.362   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:03.716   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:03.717   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:08.841   [DBG] TabNavigationHandler.handleWillNavigate(): "id: 8ee33b4f, url https://www.tradingview.com/u/uSs3ewa/"
2024-11-30 01:54:08.842   [DBG] BaseNavigationHandler.navigateToNewTab(url: https://www.tradingview.com/u/uSs3ewa/)
2024-11-30 01:54:08.842   [DBG] [4408633e] TabbedWindowBase.addTab()
2024-11-30 01:54:08.843   [DBG] TabbedWindowBase.findTabById(tabId: 6c5d837f)
2024-11-30 01:54:08.843   [DBG] TabbedWindowBase.findTabById(tabId: 6c5d837f)
2024-11-30 01:54:08.843   [DBG] [6c5d837f] Tab.setupViewEvents()
2024-11-30 01:54:08.843   [INF] Create tab url: 'https://www.tradingview.com/u/uSs3ewa/', id: '6c5d837f'
2024-11-30 01:54:08.843   [DBG] [6c5d837f] TvTab.setupTvViewEvents()
2024-11-30 01:54:08.843   [DBG] [4408633e] TabbedWindowBase.setActiveTab()
2024-11-30 01:54:08.843   [DBG] [4408633e] TabbedWindowBase.notifyTabsChanged()
2024-11-30 01:54:08.843   [DBG] [4408633e] TabbedWindowBase.updateTabsContainer()
2024-11-30 01:54:08.844   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:54:08.844   [DBG] [4408633e] TabbedWindowBase.setActiveTabView()
2024-11-30 01:54:08.845   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:54:08.845   [DBG] [4408633e] TabbedWindowBase.handleTabLoading()
2024-11-30 01:54:08.845   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:54:08.845   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:54:08.845   [DBG] [4408633e] TabbedWindowBase.notifyTabsChanged()
2024-11-30 01:54:08.845   [DBG] [4408633e] TabbedWindowBase.updateTabsContainer()
2024-11-30 01:54:08.845   [DBG] [6c5d837f] Tab.load()
2024-11-30 01:54:08.845   [DBG] TaskQueueImpl.startTask()
2024-11-30 01:54:08.845   [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:54:08.845   [DBG] WindowService.prerenderView()
2024-11-30 01:54:08.846   [DBG] [6c5d837f] Tab.setViewData()
2024-11-30 01:54:08.846   [DBG] Tab id: 6c5d837f, loading url: https://www.tradingview.com/u/uSs3ewa/
2024-11-30 01:54:08.856   [DBG] [2bc8752e] TabPanel.updateTabs()
2024-11-30 01:54:08.867   [DBG] [4408633e] TabbedWindowBase.registerTabController()
2024-11-30 01:54:08.867   [INF] TabbedWindowBase.registerTabController(tabId: 6c5d837f-96ae-4338-8c76-6dd6a3f33ba5, from window id: 00f5eeb6-tvd:tab)
2024-11-30 01:54:08.867   [DBG] [00f5eeb6] Tab.setController()
2024-11-30 01:54:08.867   [DBG] [2bc8752e] TabPanel.updateTabs()
2024-11-30 01:54:08.869   [DBG] NativeDragService.registerDraggable()
2024-11-30 01:54:08.869   [DBG] WindowService.findWindowAsync()
2024-11-30 01:54:08.871   [DBG] TabComponent.componentDidMount(): "registered controller for tab 00f5eeb6"
2024-11-30 01:54:08.871   [DBG] TabComponent.componentDidMount(): "registered draggable with id 00f5eeb6"
2024-11-30 01:54:09.402   [DBG] Tab id: 6c5d837f did-navigate (https://www.tradingview.com/u/uSs3ewa/)
2024-11-30 01:54:09.471   [DBG] Tab id: 6c5d837f page-title-updated
2024-11-30 01:54:10.311   [DBG] Tab id: 6c5d837f dom-ready
2024-11-30 01:54:10.311   [DBG] WindowService.zoom()
2024-11-30 01:54:10.311   [DBG] ZoomController.setZoomValue()
2024-11-30 01:54:10.311   [DBG] WindowService.getChartWindows()
2024-11-30 01:54:10.312   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:10.313   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:10.313   [DBG] mn.availableThemes()
2024-11-30 01:54:11.58    [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:54:11.59    [DBG] [4408633e] TabbedWindowBase.setActiveTabView()
2024-11-30 01:54:11.60    [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:54:11.60    [DBG] [4408633e] TabbedWindowBase.setWindowLoading()
2024-11-30 01:54:11.265   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:11.286   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:11.332   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:11.332   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:11.509   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:11.510   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:15.598   [DBG] TabNavigationHandler.handleWillNavigate(): "id: 6c5d837f, url https://www.tradingview.com/chart/"
2024-11-30 01:54:15.956   [DBG] Tab id: 6c5d837f did-navigate (https://www.tradingview.com/chart/)
2024-11-30 01:54:15.992   [DBG] Tab id: 6c5d837f page-title-updated
2024-11-30 01:54:16.544   [DBG] Tab id: 6c5d837f dom-ready
2024-11-30 01:54:16.544   [DBG] WindowService.zoom()
2024-11-30 01:54:16.544   [DBG] ZoomController.setZoomValue()
2024-11-30 01:54:16.544   [DBG] WindowService.getChartWindows()
2024-11-30 01:54:16.544   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:16.545   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:16.546   [DBG] mn.availableThemes()
2024-11-30 01:54:17.442   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:17.548   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:17.860   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:17.932   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:18.204   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:18.217   [DBG] [4408633e] TabbedWindowBase.findTabByWebContents()
2024-11-30 01:54:29.940   [INF] Invoke key binding [ctrl+Minus]
2024-11-30 01:54:29.940   [DBG] MenuWindow.hide()
2024-11-30 01:54:29.940   [DBG] MainMenuService.hideMenu()
2024-11-30 01:54:29.940   [DBG] MenuWindow.hide()
2024-11-30 01:54:29.940   [DBG] WindowService.zoom()
2024-11-30 01:54:29.940   [DBG] ZoomController.stepZoom()
2024-11-30 01:54:29.940   [DBG] ZoomController.setZoomToView()
2024-11-30 01:54:29.940   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:29.941   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:29.941   [DBG] ZoomController.showZoom()
2024-11-30 01:54:29.941   [DBG] ZoomController.getToastWindow()
2024-11-30 01:54:29.942   [DBG] Initializing ToastWindow id 53d8769d-tvd:toast-window
2024-11-30 01:54:29.947   [DBG] mn.applyTheme()
2024-11-30 01:54:29.947   [DBG] ToastWindow.loadToast(toast: a)
2024-11-30 01:54:29.961   [DBG] mn.availableThemes()
2024-11-30 01:54:30.353   [INF] Invoke key binding [ctrl+Minus]
2024-11-30 01:54:30.353   [DBG] MenuWindow.hide()
2024-11-30 01:54:30.353   [DBG] MainMenuService.hideMenu()
2024-11-30 01:54:30.353   [DBG] MenuWindow.hide()
2024-11-30 01:54:30.353   [DBG] WindowService.zoom()
2024-11-30 01:54:30.353   [DBG] ZoomController.stepZoom()
2024-11-30 01:54:30.353   [DBG] ZoomController.setZoomToView()
2024-11-30 01:54:30.353   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:30.354   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:30.355   [DBG] ZoomController.showZoom()
2024-11-30 01:54:30.355   [DBG] ZoomController.getToastWindow()
2024-11-30 01:54:30.356   [DBG] mn.availableThemes()
2024-11-30 01:54:30.356   [DBG] ToastWindow.setToastPosition(coordinates: { x: 715, y: 133 })
2024-11-30 01:54:30.357   [DBG] ToastWindow.setAlwaysOnTop(flag: true, level: pop-up-menu, relativeLevel: 1})
2024-11-30 01:54:30.357   [DBG] ToastWindow.show(wnd: 3)
2024-11-30 01:54:30.377   [DBG] ToastWindow.registerDimensionsCalcView(id: f7c5d5ed-tvd:toast-view)
2024-11-30 01:54:30.378   [DBG] [Renderer] Toast view id: f7c5d5ed-tvd:toast-view
2024-11-30 01:54:30.379   [DBG] [Renderer] initializeIpcProxyForInstance toastWindowHandler id: 53d8769d-tvd:toast-window; Old id undefined
2024-11-30 01:54:30.381   [DBG] ToastWindow.setToastSizes(dimensions: { width: 136, height: 51)
2024-11-30 01:54:30.383   [DBG] ToastWindow.setToastPosition(coordinates: { x: 715, y: 133 })
2024-11-30 01:54:30.383   [DBG] ToastWindow.setAlwaysOnTop(flag: true, level: pop-up-menu, relativeLevel: 1})
2024-11-30 01:54:30.383   [DBG] ToastWindow.show(wnd: 3)
2024-11-30 01:54:30.384   [DBG] ToastWindow.setToastSizes(dimensions: { width: 136, height: 51)
2024-11-30 01:54:31.795   [INF] Invoke key binding [ctrl+Equal]
2024-11-30 01:54:31.795   [DBG] MenuWindow.hide()
2024-11-30 01:54:31.795   [DBG] MainMenuService.hideMenu()
2024-11-30 01:54:31.795   [DBG] MenuWindow.hide()
2024-11-30 01:54:31.795   [DBG] WindowService.zoom()
2024-11-30 01:54:31.795   [DBG] ZoomController.stepZoom()
2024-11-30 01:54:31.795   [DBG] ZoomController.setZoomToView()
2024-11-30 01:54:31.795   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:31.796   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:31.796   [DBG] ZoomController.showZoom()
2024-11-30 01:54:31.797   [DBG] ZoomController.getToastWindow()
2024-11-30 01:54:31.797   [DBG] mn.availableThemes()
2024-11-30 01:54:31.798   [DBG] ToastWindow.setToastPosition(coordinates: { x: 715, y: 133 })
2024-11-30 01:54:31.798   [DBG] ToastWindow.setAlwaysOnTop(flag: true, level: pop-up-menu, relativeLevel: 1})
2024-11-30 01:54:31.798   [DBG] ToastWindow.show(wnd: 3)
2024-11-30 01:54:31.799   [DBG] ToastWindow.setToastSizes(dimensions: { width: 136, height: 51)
2024-11-30 01:54:32.21    [INF] Invoke key binding [ctrl+Equal]
2024-11-30 01:54:32.21    [DBG] MenuWindow.hide()
2024-11-30 01:54:32.21    [DBG] MainMenuService.hideMenu()
2024-11-30 01:54:32.21    [DBG] MenuWindow.hide()
2024-11-30 01:54:32.21    [DBG] WindowService.zoom()
2024-11-30 01:54:32.21    [DBG] ZoomController.stepZoom()
2024-11-30 01:54:32.21    [DBG] ZoomController.setZoomToView()
2024-11-30 01:54:32.21    [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:32.22    [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:32.23    [DBG] ZoomController.showZoom()
2024-11-30 01:54:32.23    [DBG] ZoomController.getToastWindow()
2024-11-30 01:54:32.23    [DBG] mn.availableThemes()
2024-11-30 01:54:32.24    [DBG] ToastWindow.setToastPosition(coordinates: { x: 715, y: 133 })
2024-11-30 01:54:32.24    [DBG] ToastWindow.setAlwaysOnTop(flag: true, level: pop-up-menu, relativeLevel: 1})
2024-11-30 01:54:32.24    [DBG] ToastWindow.show(wnd: 3)
2024-11-30 01:54:32.25    [DBG] ToastWindow.setToastSizes(dimensions: { width: 136, height: 51)
2024-11-30 01:54:33.101   [INF] Invoke key binding [ctrl+Minus]
2024-11-30 01:54:33.101   [DBG] MenuWindow.hide()
2024-11-30 01:54:33.101   [DBG] MainMenuService.hideMenu()
2024-11-30 01:54:33.101   [DBG] MenuWindow.hide()
2024-11-30 01:54:33.101   [DBG] WindowService.zoom()
2024-11-30 01:54:33.101   [DBG] ZoomController.stepZoom()
2024-11-30 01:54:33.101   [DBG] ZoomController.setZoomToView()
2024-11-30 01:54:33.101   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:33.102   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:33.102   [DBG] ZoomController.showZoom()
2024-11-30 01:54:33.102   [DBG] ZoomController.getToastWindow()
2024-11-30 01:54:33.103   [DBG] mn.availableThemes()
2024-11-30 01:54:33.103   [DBG] ToastWindow.setToastPosition(coordinates: { x: 715, y: 133 })
2024-11-30 01:54:33.103   [DBG] ToastWindow.setAlwaysOnTop(flag: true, level: pop-up-menu, relativeLevel: 1})
2024-11-30 01:54:33.103   [DBG] ToastWindow.show(wnd: 3)
2024-11-30 01:54:33.104   [DBG] ToastWindow.setToastSizes(dimensions: { width: 136, height: 51)
2024-11-30 01:54:33.263   [INF] Invoke key binding [ctrl+Minus]
2024-11-30 01:54:33.263   [DBG] MenuWindow.hide()
2024-11-30 01:54:33.263   [DBG] MainMenuService.hideMenu()
2024-11-30 01:54:33.263   [DBG] MenuWindow.hide()
2024-11-30 01:54:33.263   [DBG] WindowService.zoom()
2024-11-30 01:54:33.263   [DBG] ZoomController.stepZoom()
2024-11-30 01:54:33.263   [DBG] ZoomController.setZoomToView()
2024-11-30 01:54:33.264   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:33.264   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:33.264   [DBG] ZoomController.showZoom()
2024-11-30 01:54:33.265   [DBG] ZoomController.getToastWindow()
2024-11-30 01:54:33.265   [DBG] mn.availableThemes()
2024-11-30 01:54:33.266   [DBG] ToastWindow.setToastPosition(coordinates: { x: 715, y: 133 })
2024-11-30 01:54:33.266   [DBG] ToastWindow.setAlwaysOnTop(flag: true, level: pop-up-menu, relativeLevel: 1})
2024-11-30 01:54:33.266   [DBG] ToastWindow.show(wnd: 3)
2024-11-30 01:54:33.267   [DBG] ToastWindow.setToastSizes(dimensions: { width: 136, height: 51)
2024-11-30 01:54:33.465   [INF] Invoke key binding [ctrl+Minus]
2024-11-30 01:54:33.465   [DBG] MenuWindow.hide()
2024-11-30 01:54:33.465   [DBG] MainMenuService.hideMenu()
2024-11-30 01:54:33.465   [DBG] MenuWindow.hide()
2024-11-30 01:54:33.465   [DBG] WindowService.zoom()
2024-11-30 01:54:33.465   [DBG] ZoomController.stepZoom()
2024-11-30 01:54:33.465   [DBG] ZoomController.setZoomToView()
2024-11-30 01:54:33.465   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:33.466   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:33.466   [DBG] ZoomController.showZoom()
2024-11-30 01:54:33.467   [DBG] ZoomController.getToastWindow()
2024-11-30 01:54:33.467   [DBG] mn.availableThemes()
2024-11-30 01:54:33.467   [DBG] ToastWindow.setToastPosition(coordinates: { x: 715, y: 133 })
2024-11-30 01:54:33.468   [DBG] ToastWindow.setAlwaysOnTop(flag: true, level: pop-up-menu, relativeLevel: 1})
2024-11-30 01:54:33.468   [DBG] ToastWindow.show(wnd: 3)
2024-11-30 01:54:33.470   [DBG] ToastWindow.setToastSizes(dimensions: { width: 136, height: 51)
2024-11-30 01:54:33.931   [INF] Invoke key binding [ctrl+Minus]
2024-11-30 01:54:33.931   [DBG] MenuWindow.hide()
2024-11-30 01:54:33.931   [DBG] MainMenuService.hideMenu()
2024-11-30 01:54:33.931   [DBG] MenuWindow.hide()
2024-11-30 01:54:33.931   [DBG] WindowService.zoom()
2024-11-30 01:54:33.931   [DBG] ZoomController.stepZoom()
2024-11-30 01:54:33.931   [DBG] ZoomController.setZoomToView()
2024-11-30 01:54:33.931   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:33.931   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:33.931   [DBG] ZoomController.showZoom()
2024-11-30 01:54:33.931   [DBG] ZoomController.getToastWindow()
2024-11-30 01:54:33.932   [DBG] mn.availableThemes()
2024-11-30 01:54:33.932   [DBG] ToastWindow.setToastPosition(coordinates: { x: 715, y: 133 })
2024-11-30 01:54:33.932   [DBG] ToastWindow.setAlwaysOnTop(flag: true, level: pop-up-menu, relativeLevel: 1})
2024-11-30 01:54:33.932   [DBG] ToastWindow.show(wnd: 3)
2024-11-30 01:54:33.933   [DBG] ToastWindow.setToastSizes(dimensions: { width: 136, height: 51)
2024-11-30 01:54:34.894   [INF] Invoke key binding [ctrl+Equal]
2024-11-30 01:54:34.894   [DBG] MenuWindow.hide()
2024-11-30 01:54:34.895   [DBG] MainMenuService.hideMenu()
2024-11-30 01:54:34.895   [DBG] MenuWindow.hide()
2024-11-30 01:54:34.895   [DBG] WindowService.zoom()
2024-11-30 01:54:34.895   [DBG] ZoomController.stepZoom()
2024-11-30 01:54:34.895   [DBG] ZoomController.setZoomToView()
2024-11-30 01:54:34.895   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:34.896   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:34.896   [DBG] ZoomController.showZoom()
2024-11-30 01:54:34.896   [DBG] ZoomController.getToastWindow()
2024-11-30 01:54:34.898   [DBG] mn.availableThemes()
2024-11-30 01:54:34.898   [DBG] ToastWindow.setToastPosition(coordinates: { x: 715, y: 133 })
2024-11-30 01:54:34.898   [DBG] ToastWindow.setAlwaysOnTop(flag: true, level: pop-up-menu, relativeLevel: 1})
2024-11-30 01:54:34.898   [DBG] ToastWindow.show(wnd: 3)
2024-11-30 01:54:34.900   [DBG] ToastWindow.setToastSizes(dimensions: { width: 136, height: 51)
2024-11-30 01:54:35.439   [INF] Invoke key binding [ctrl+Equal]
2024-11-30 01:54:35.439   [DBG] MenuWindow.hide()
2024-11-30 01:54:35.439   [DBG] MainMenuService.hideMenu()
2024-11-30 01:54:35.439   [DBG] MenuWindow.hide()
2024-11-30 01:54:35.439   [DBG] WindowService.zoom()
2024-11-30 01:54:35.439   [DBG] ZoomController.stepZoom()
2024-11-30 01:54:35.439   [DBG] ZoomController.setZoomToView()
2024-11-30 01:54:35.439   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:35.440   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:35.440   [DBG] ZoomController.showZoom()
2024-11-30 01:54:35.440   [DBG] ZoomController.getToastWindow()
2024-11-30 01:54:35.441   [DBG] mn.availableThemes()
2024-11-30 01:54:35.441   [DBG] ToastWindow.setToastPosition(coordinates: { x: 715, y: 133 })
2024-11-30 01:54:35.441   [DBG] ToastWindow.setAlwaysOnTop(flag: true, level: pop-up-menu, relativeLevel: 1})
2024-11-30 01:54:35.441   [DBG] ToastWindow.show(wnd: 3)
2024-11-30 01:54:35.444   [DBG] ToastWindow.setToastSizes(dimensions: { width: 136, height: 51)
2024-11-30 01:54:35.827   [INF] Invoke key binding [ctrl+Equal]
2024-11-30 01:54:35.827   [DBG] MenuWindow.hide()
2024-11-30 01:54:35.827   [DBG] MainMenuService.hideMenu()
2024-11-30 01:54:35.827   [DBG] MenuWindow.hide()
2024-11-30 01:54:35.827   [DBG] WindowService.zoom()
2024-11-30 01:54:35.827   [DBG] ZoomController.stepZoom()
2024-11-30 01:54:35.827   [DBG] ZoomController.setZoomToView()
2024-11-30 01:54:35.827   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:35.829   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:35.829   [DBG] ZoomController.showZoom()
2024-11-30 01:54:35.829   [DBG] ZoomController.getToastWindow()
2024-11-30 01:54:35.830   [DBG] mn.availableThemes()
2024-11-30 01:54:35.830   [DBG] ToastWindow.setToastPosition(coordinates: { x: 715, y: 133 })
2024-11-30 01:54:35.830   [DBG] ToastWindow.setAlwaysOnTop(flag: true, level: pop-up-menu, relativeLevel: 1})
2024-11-30 01:54:35.830   [DBG] ToastWindow.show(wnd: 3)
2024-11-30 01:54:35.832   [DBG] ToastWindow.setToastSizes(dimensions: { width: 136, height: 51)
2024-11-30 01:54:36.982   [INF] Invoke key binding [ctrl+Equal]
2024-11-30 01:54:36.983   [DBG] MenuWindow.hide()
2024-11-30 01:54:36.983   [DBG] MainMenuService.hideMenu()
2024-11-30 01:54:36.983   [DBG] MenuWindow.hide()
2024-11-30 01:54:36.983   [DBG] WindowService.zoom()
2024-11-30 01:54:36.983   [DBG] ZoomController.stepZoom()
2024-11-30 01:54:36.983   [DBG] ZoomController.setZoomToView()
2024-11-30 01:54:36.983   [DBG] MainMenuService.buildAppMenu()
2024-11-30 01:54:36.983   [DBG] MainMenuService.makeThemesMenu()
2024-11-30 01:54:36.984   [DBG] ZoomController.showZoom()
2024-11-30 01:54:36.984   [DBG] ZoomController.getToastWindow()
2024-11-30 01:54:36.984   [DBG] mn.availableThemes()
2024-11-30 01:54:36.984   [DBG] ToastWindow.setToastPosition(coordinates: { x: 715, y: 133 })
2024-11-30 01:54:36.985   [DBG] ToastWindow.setAlwaysOnTop(flag: true, level: pop-up-menu, relativeLevel: 1})
2024-11-30 01:54:36.985   [DBG] ToastWindow.show(wnd: 3)
2024-11-30 01:54:36.986   [DBG] ToastWindow.setToastSizes(dimensions: { width: 136, height: 51)
2024-11-30 01:54:38.990   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:25.960   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:57:38.475   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:57:44.575   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:57:51.420   [DBG] Tab id: 6c5d837f new-window
2024-11-30 01:57:51.437   [DBG] BaseNavigationHandler.navigateToPopup(url: https://www.tradingview.com/trading/signin/bybit/prod-live/?req=0.11663037&redirect_uri=https%3A%2F%2Fwww.tradingview.com%2Ftrading%2Foauth-redirect%2Fbybit%2Fprod-live%2F0.11663037%2F)
2024-11-30 01:57:51.438   [INF] PopupWindow: Will create popup window for url:(https://www.tradingview.com/trading/signin/bybit/prod-live/?req=0.11663037&redirect_uri=https%3A%2F%2Fwww.tradingview.com%2Ftrading%2Foauth-redirect%2Fbybit%2Fprod-live%2F0.11663037%2F)
2024-11-30 01:57:51.483   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:57:51.485   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.485   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.485   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.485   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.485   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.485   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.485   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.485   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.485   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.485   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.485   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.485   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.486   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.486   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.486   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.486   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.486   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.486   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.486   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.487   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.487   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.487   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.487   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:51.487   [DBG] ZoomController.hideZoomPopup()
2024-11-30 01:57:55.869   [INF] Check permission (geolocation) on (n)
2024-11-30 01:58:04.62    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:04.63    [INF] Check permission (midi) on (n)
2024-11-30 01:58:05.973   [INF] Check permission (media) on (n)
2024-11-30 01:58:07.185   [INF] Check permission (media) on (n)
2024-11-30 01:58:08.291   [INF] Check permission (persistent-storage) on (n)
2024-11-30 01:58:09.204   [INF] Check permission (payment-handler) on (n)
2024-11-30 01:58:09.949   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:09.950   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:09.959   [WRN] Failed request to https://data.tradingview.com/ping
2024-11-30 01:58:09.971   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:09.971   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:09.972   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:09.972   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:09.972   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:09.972   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:09.973   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:09.973   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:09.973   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:09.974   [INF] Check permission (geolocation) on (n)
2024-11-30 01:58:10.617   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:10.628   [INF] Check permission (midi) on (n)
2024-11-30 01:58:11.237   [INF] Check permission (media) on (n)
2024-11-30 01:58:11.875   [INF] Check permission (media) on (n)
2024-11-30 01:58:12.401   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:12.402   [INF] Check permission (persistent-storage) on (n)
2024-11-30 01:58:12.741   [INF] Check permission (payment-handler) on (n)
2024-11-30 01:58:13.56    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:13.60    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:13.61    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:13.61    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:13.61    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:13.62    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:13.62    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:13.62    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:13.63    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:13.63    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:13.75    [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:13.395   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:13.678   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:16.869   [INF] Check permission (media) on (n)
2024-11-30 01:58:18.821   [INF] Check permission (media) on (n)
2024-11-30 01:58:19.410   [INF] Check permission (geolocation) on (n)
2024-11-30 01:58:19.904   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:19.905   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:19.906   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:19.906   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:19.920   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:19.922   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:19.932   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:19.948   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:20.83    [INF] Check permission (media) on (n)
2024-11-30 01:58:20.707   [INF] Check permission (media) on (n)
2024-11-30 01:58:21.318   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:21.321   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:21.323   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:21.326   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:21.630   [INF] Check permission (background-fetch) on (n)
2024-11-30 01:58:22.370   [INF] Check permission (media) on (n)
2024-11-30 01:58:22.770   [INF] Check permission (display-capture) on (n)
2024-11-30 01:58:23.131   [INF] Check permission (geolocation) on (n)
2024-11-30 01:58:23.403   [INF] Check permission (media) on (n)
2024-11-30 01:58:25.444   [INF] Check permission (midi) on (n)
2024-11-30 01:58:25.627   [INF] Check permission (persistent-storage) on (n)
2024-11-30 01:58:25.800   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.802   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.803   [DBG] RemoteInstanceManager.cleanSubscriptions()
2024-11-30 01:58:25.806   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.808   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.810   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.811   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.811   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.811   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.814   [DBG] [4408633e] TabbedWindowBase.notifyInputEvent()
2024-11-30 01:58:25.816   [DBG] [4408633e] TabbedWindowBase.notifyInputEventFilterForRuLang()
2024-11-30 01:58:25.817   [DBG] [4408633e] TabbedWindowBase.notifyInputEvent()
2024-11-30 01:58:25.817   [DBG] [4408633e] TabbedWindowBase.notifyInputEventFilterForRuLang()
2024-11-30 01:58:25.818   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.819   [DBG] [4408633e] TabbedWindowBase.notifyInputEvent()
2024-11-30 01:58:25.819   [DBG] [4408633e] TabbedWindowBase.notifyInputEventFilterForRuLang()
2024-11-30 01:58:25.819   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.823   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.824   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.825   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.825   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.827   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.829   [INF] Check permission (background-fetch) on (n)
2024-11-30 01:58:25.952   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:25.961   [INF] Check permission (display-capture) on (n)
2024-11-30 01:58:26.105   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:26.108   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:26.153   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:26.250   [DBG] [4408633e] BaseWindow.processClose()
2024-11-30 01:58:26.250   [DBG] WindowService.mayClose()
2024-11-30 01:58:26.250   [DBG] [4408633e] TabbedWindowBase.willCloseWindow()
2024-11-30 01:58:26.360   [DBG] [4408633e] TabbedWindowBase.hasChartUrlWithQueryParams()
2024-11-30 01:58:26.361   [DBG] WindowService.checkAutoSave()
2024-11-30 01:58:26.361   [DBG] [29e96b59] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:26.361   [DBG] [d980c56a] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:26.361   [DBG] [00f5eeb6] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:26.491   [DBG] WindowService.checkAutoSave(): true
2024-11-30 01:58:26.492   [DBG] [4408633e] TabbedWindowBase.showSaveChangesDialog()
2024-11-30 01:58:26.492   [DBG] TabbedWindowBase.showSaveChangesDialog(): 
				hasSaveDialog = false;
				isOnlySave = false;
				this.saveChangesDialogSub = false;
				mode = isWindow
2024-11-30 01:58:26.493   [DBG] R.createDialogWindow()
2024-11-30 01:58:26.500   [DBG] BaseWindow.addDisposable()
2024-11-30 01:58:26.500   [DBG] BaseWindow.applyWindowTheme()
2024-11-30 01:58:26.500   [DBG] mn.applyTheme()
2024-11-30 01:58:26.500   [DBG] BaseWindow.addDisposable()
2024-11-30 01:58:26.501   [DBG] Dialog registered d3e19c9f
2024-11-30 01:58:26.501   [DBG] [d3e19c9f] BaseWindow.load()
2024-11-30 01:58:26.516   [DBG] [d3e19c9f] BaseWindow.createAppAwaiter()
2024-11-30 01:58:26.776   [DBG] Platform requested get-theme
2024-11-30 01:58:26.896   [DBG] [1:58:26]-[1:58:26]: 'BaseWindow: loading window page, url: '/app/dialog-window/index.html'' (395) ms
2024-11-30 01:58:26.907   [INF] Window page loaded, url: '/app/dialog-window/index.html'
2024-11-30 01:58:26.909   [DBG] [d3e19c9f] BaseWindow.show()
2024-11-30 01:58:26.919   [DBG] [d3e19c9f] BaseWindow.moveTop()
2024-11-30 01:58:26.919   [INF] [DialogWindow]: dialog without title showed
2024-11-30 01:58:26.920   [DBG] [d3e19c9f] BaseWindow.show()
2024-11-30 01:58:27.860   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:27.981   [DBG] DialogWindow.keyDownHandler()
2024-11-30 01:58:28.189   [DBG] [d3e19c9f] BaseWindow.processClose()
2024-11-30 01:58:28.189   [DBG] WindowService.mayClose()
2024-11-30 01:58:28.189   [DBG] [d3e19c9f] BaseWindow.willCloseWindow()
2024-11-30 01:58:28.192   [DBG] [d3e19c9f] BaseWindow.dispose()
2024-11-30 01:58:28.202   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:28.205   [DBG] AppEventsService.focusWebContent()
2024-11-30 01:58:29.73    [DBG] [4408633e] BaseWindow.processClose()
2024-11-30 01:58:29.73    [DBG] WindowService.mayClose()
2024-11-30 01:58:29.73    [DBG] [4408633e] TabbedWindowBase.willCloseWindow()
2024-11-30 01:58:29.135   [DBG] [4408633e] TabbedWindowBase.hasChartUrlWithQueryParams()
2024-11-30 01:58:29.135   [DBG] WindowService.checkAutoSave()
2024-11-30 01:58:29.135   [DBG] [29e96b59] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:29.135   [DBG] [d980c56a] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:29.135   [DBG] [00f5eeb6] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:29.138   [DBG] WindowService.checkAutoSave(): false
2024-11-30 01:58:29.139   [DBG] [4408633e] TabbedWindowBase.tabClosedInsteadOfWindow()
2024-11-30 01:58:29.139   [DBG] [4408633e] TabbedWindowBase.makeStateSnapshot()
2024-11-30 01:58:29.139   [DBG] [29e96b59] Tab.makeStateSnapshot()
2024-11-30 01:58:29.139   [DBG] [29e96b59] Tab.makeStateSnapshot()
2024-11-30 01:58:29.139   [DBG] [d980c56a] Tab.makeStateSnapshot()
2024-11-30 01:58:29.139   [DBG] [d980c56a] Tab.makeStateSnapshot()
2024-11-30 01:58:29.139   [DBG] [00f5eeb6] Tab.makeStateSnapshot()
2024-11-30 01:58:29.139   [DBG] [00f5eeb6] Tab.makeStateSnapshot()
2024-11-30 01:58:29.201   [DBG] [29e96b59] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:29.264   [DBG] [d980c56a] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:29.326   [DBG] [00f5eeb6] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:29.333   [DBG] [4408633e] TabbedWindowBase.dispose()
2024-11-30 01:58:29.333   [DBG] [4408633e] s.notifyListeners()
2024-11-30 01:58:29.333   [DBG] s.notifyListeners()
2024-11-30 01:58:29.333   [DBG] Electron.App (before-quit)
2024-11-30 01:58:29.333   [DBG] AppEventsService.beforeDeferredQuit()
2024-11-30 01:58:29.333   [DBG] WindowService.hasChartUrlWithQueryParamsInSomeWindows()
2024-11-30 01:58:29.333   [DBG] [4408633e] TabbedWindowBase.hasChartUrlWithQueryParams()
2024-11-30 01:58:29.334   [DBG] WindowService.checkAutoSave()
2024-11-30 01:58:29.334   [DBG] [29e96b59] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:29.334   [DBG] [d980c56a] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:29.334   [DBG] [00f5eeb6] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:29.337   [DBG] NativeDragService.unregister(): "Will unregister: 2bc8752e"
2024-11-30 01:58:29.337   [DBG] [4408633e] TabbedWindowBase.disposeTabs()
2024-11-30 01:58:29.338   [DBG] [29e96b59] Tab.dispose()
2024-11-30 01:58:29.338   [DBG] [29e96b59] Tab.invalidateController()
2024-11-30 01:58:29.340   [DBG] NativeDragService.unregister(): "Will unregister: 29e96b59"
2024-11-30 01:58:29.341   [DBG] WindowService.checkAutoSave(): false
2024-11-30 01:58:29.341   [DBG] AppEventsService.tryShutdown()
2024-11-30 01:58:29.341   [DBG] WindowService.hasUnsavedChanges()
2024-11-30 01:58:29.342   [DBG] [29e96b59] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:29.342   [DBG] [d980c56a] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:29.342   [DBG] [00f5eeb6] Tab.dispatchBeforeUnloadEvent()
2024-11-30 01:58:29.342   [DBG] TabComponent.componentWillUnmount(): "Unmounting 29e96b59"
2024-11-30 01:58:29.343   [DBG] TabComponent.componentWillUnmount(): "Unmounting d980c56a"
2024-11-30 01:58:29.343   [DBG] TabComponent.componentWillUnmount(): "Unmounting 00f5eeb6"
2024-11-30 01:58:29.366   [DBG] Tab id: 442dfb0f did-navigate (k)
2024-11-30 01:58:29.366   [DBG] Navigate (about:blank) with NON-OK response code: -1
2024-11-30 01:58:29.379   [DBG] Tab id: 442dfb0f dom-ready
2024-11-30 01:58:29.379   [DBG] LinkingService.unlink()
2024-11-30 01:58:29.380   [DBG] [d980c56a] Tab.dispose()
2024-11-30 01:58:29.380   [DBG] [d980c56a] Tab.invalidateController()
2024-11-30 01:58:29.381   [DBG] NativeDragService.unregister(): "Will unregister: d980c56a"
2024-11-30 01:58:29.382   [DBG] PersistenceService.store()
2024-11-30 01:58:29.382   [DBG] PersistentArrayProxy.internalExtractState()
2024-11-30 01:58:29.382   [DBG] [4408633e] TabbedWindowBase.internalExtractState()
2024-11-30 01:58:29.382   [DBG] LinkingService.internalExtractState()
2024-11-30 01:58:29.382   [DBG] PersistentArrayProxy.internalExtractState()
2024-11-30 01:58:29.382   [DBG] [4408633e] TabbedWindowBase.internalExtractState()
2024-11-30 01:58:29.382   [DBG] LinkingService.internalExtractState()
2024-11-30 01:58:29.382   [DBG] TrackEventService.setAppWindowsData()
2024-11-30 01:58:29.382   [DBG] FileBasedStorage.store()
2024-11-30 01:58:29.385   [DBG] WindowService.getChartWindows()
2024-11-30 01:58:29.385   [DBG] WindowService.mayClose()
2024-11-30 01:58:29.385   [INF] [AppEventsService.tryShutdown()] App may close
2024-11-30 01:58:29.385   [DBG] WindowService.getChartWindows()
2024-11-30 01:58:29.385   [DBG] TrackEventService.trackCloseApp()
2024-11-30 01:58:29.385   [DBG] WindowService.disposeWindows()
2024-11-30 01:58:29.386   [DBG] WindowService.disposeWindows()
2024-11-30 01:58:29.386   [DBG] [4408633e] TabbedWindowBase.dispose()
2024-11-30 01:58:29.387   [DBG] WindowService.disposeDefaultWindow()
2024-11-30 01:58:29.387   [DBG] Drag service dispose
